@page "/Gastos/Index"
@inject GastosServices gastosService
@inject CategoriasService categoriasSeervice
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<div class="container card shadow-lg">
    <div class="card-header text-center bg-danger text-white">
        <h3><strong>Lista de Gastos</strong></h3>
    </div>

    @* Filtro por rango de fecha *@
    <div class="row g-3 align-items-center mb-4">
        <div class="col-md-4">
            <label for="fechaInicio" class="form-label fw-bold">Desde:</label>
            <InputDate id="fechaInicio" class="form-control" @bind-Value="fechaInicio" />
        </div>

        <div class="col-md-4">
            <label for="fechaFin" class="form-label fw-bold">Hasta:</label>
            <InputDate id="fechaFin" class="form-control" @bind-Value="fechaFin" />
        </div>

        <div class="col-md-4 text-md-end">
            <button @onclick="Buscar" class="btn btn-success">
                <i class="bi bi-search"></i> Filtrar
            </button>
            <a href="/Gastos/Create" class="btn btn-outline-danger">
                <i class="bi bi-plus-circle"></i> Nuevo Gasto
            </a>
        </div>
    </div>

    @* Tabla de Gastos *@
    <div class="card border-0 shadow-sm mt-4">
        <div class="card-body">
            <table class="table table-hover table-bordered text-center">
                <thead>
                    <tr>
                        <th>Descripción</th>
                        <th>Monto</th>
                        <th>Fecha</th>
                        <th>Eliminar</th>
                        <th>Editar</th>
                    </tr>
                </thead>
                <tbody>
                    
                    @foreach (var gasto in gastos)
                    {
                        <tr>
                         @*    <td>@gasto.Categoria?.Nombre</td> *@
                            <td>@gasto.Descripcion</td>
                            <td>$@gasto.Monto.ToString("N2")</td>
                            <td>@gasto.Fecha.ToShortDateString()</td>
                          
                            <td>
                                <button type="button" class="btn btn-danger" @onclick="() => MostrarModal(gasto)">
                                    <i class="bi bi-trash3"></i>
                                </button>
                            </td>
                            <td>
                                <a href="/Gastos/Edit/@gasto.GastoId" class="btn btn-warning text-white">
                                    <i class="bi bi-pencil-square"></i>
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="card-footer bg-light text-end">
            <p class="mb-1 fw-bold">Total de Gastos: $@gastos.Sum(g => g.Monto).ToString("N2")</p>
        </div>
    </div>
</div>

@if (mostrarModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Eliminar Gasto</h5>
                </div>
                <div class="modal-body">
                    ¿Estás seguro de que deseas eliminar este gasto?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="EliminarGasto">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show" @onclick="CerrarModal"></div>
}

@code {
    public List<Gastos> gastos { get; set; } = new List<Gastos>();
    public List<Categorias> categorias = new List<Categorias>();
    public DateTime fechaInicio { get; set; } = DateTime.Now.AddDays(-7);
    public DateTime fechaFin { get; set; } = DateTime.Now;
    public Gastos gasto { get; set; }
    public bool mostrarModal { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarGastos();
       categorias= await categoriasSeervice.Listar(a => true);
    }

    public async Task CargarGastos()
    {
        gastos = await gastosService.Listar(g => g.Fecha >= fechaInicio && g.Fecha <= fechaFin);
    }

    public async Task Buscar()
    {
        gastos = await gastosService.Listar(g => g.Fecha >= fechaInicio && g.Fecha <= fechaFin);
    }

    private void MostrarModal(Gastos gastoSeleccionado)
    {
        gasto = gastoSeleccionado;
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        gasto = null;
    }

    private async Task EliminarGasto()
    {
        if (gasto != null)
        {
            await gastosService.Eliminar(gasto.GastoId);
            await CargarGastos(); 
            CerrarModal();
        }
    }
}
